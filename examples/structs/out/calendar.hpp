// Generated by packtype (https://github.com/Intuity/packtype)
// Date created: 2021-09-01T22:36:35.648900
// Source file : /Users/peterbirch/Development/Experiments/packtype/examples/structs/spec.py
//

#ifndef __CALENDAR_HPP__
#define __CALENDAR_HPP__

#include <stdint.h>
#include <string.h>

namespace Calendar {

    // =========================================================================
    // Constants
    // =========================================================================


    // =========================================================================
    // Enumerations
    // =========================================================================

    // =========================================================================
    // Data Structures
    // =========================================================================

    // Struct: date_t (21 bits)
    //
    typedef struct {
        uint8_t day;
        uint8_t month;
        uint16_t year;
    } date_t;

    // Struct: time_t (17 bits)
    //
    typedef struct {
        uint8_t hour;
        uint8_t minute;
        uint8_t second;
    } time_t;

    // Struct: date_time_t (38 bits)
    //
    typedef struct {
        date_t date;
        time_t time;
    } date_time_t;

    // =========================================================================
    // Struct Pack/Unpack Routines
    // =========================================================================

    void pack_date (
        date_t obj,
        uint8_t * packed
    ) {
        // Clear the structure
        memset((void *)packed, 0, 3);
        // Pack any referenced structs
        // Pack scalar and enumerated fields
        // - day (5 bits)
        packed[0] |= (obj.day >> 0) & 0x1F;
        // - month (4 bits)
        packed[0] |= (obj.month << 5) & 0xE0;
        packed[1] |= (obj.month >> 3) & 0x01;
        // - year (12 bits)
        packed[1] |= (obj.year << 1) & 0xFE;
        packed[2] |= (obj.year >> 7) & 0x1F;
    }

    date_t unpack_date (
        uint8_t * packed
    ) {
        date_t obj;
        // Unpack any referenced structures
        // Unpack any scalar or enumerated fields
        // - day (5 bits)
        obj.day = 0;
        obj.day |= (packed[0] & 0x1F) >> 0;
        // - month (4 bits)
        obj.month = 0;
        obj.month |= (packed[0] & 0xE0) >> 5;
        obj.month |= (packed[1] & 0x01) << 3;
        // - year (12 bits)
        obj.year = 0;
        obj.year |= (packed[1] & 0xFE) >> 1;
        obj.year |= (packed[2] & 0x1F) << 7;
        return obj;
    }

    void pack_time (
        time_t obj,
        uint8_t * packed
    ) {
        // Clear the structure
        memset((void *)packed, 0, 3);
        // Pack any referenced structs
        // Pack scalar and enumerated fields
        // - hour (5 bits)
        packed[0] |= (obj.hour >> 0) & 0x1F;
        // - minute (6 bits)
        packed[0] |= (obj.minute << 5) & 0xE0;
        packed[1] |= (obj.minute >> 3) & 0x07;
        // - second (6 bits)
        packed[1] |= (obj.second << 3) & 0xF8;
        packed[2] |= (obj.second >> 5) & 0x01;
    }

    time_t unpack_time (
        uint8_t * packed
    ) {
        time_t obj;
        // Unpack any referenced structures
        // Unpack any scalar or enumerated fields
        // - hour (5 bits)
        obj.hour = 0;
        obj.hour |= (packed[0] & 0x1F) >> 0;
        // - minute (6 bits)
        obj.minute = 0;
        obj.minute |= (packed[0] & 0xE0) >> 5;
        obj.minute |= (packed[1] & 0x07) << 3;
        // - second (6 bits)
        obj.second = 0;
        obj.second |= (packed[1] & 0xF8) >> 3;
        obj.second |= (packed[2] & 0x01) << 5;
        return obj;
    }

    void pack_date_time (
        date_time_t obj,
        uint8_t * packed
    ) {
        // Clear the structure
        memset((void *)packed, 0, 5);
        // Pack any referenced structs
        // - date (21 bits)
        uint8_t packed_date[3];
        pack_date(obj.date, packed_date);
        packed[0] |= (packed_date[0] & 0xFF) >> 0;
        packed[1] |= (packed_date[1] & 0xFF) >> 0;
        packed[2] |= (packed_date[2] & 0x1F) >> 0;
        // - time (17 bits)
        uint8_t packed_time[3];
        pack_time(obj.time, packed_time);
        packed[2] |= (packed_time[0] & 0x07) << 5;
        packed[3] |= (packed_time[0] & 0xF8) >> 3;
        packed[3] |= (packed_time[1] & 0x07) << 5;
        packed[4] |= (packed_time[1] & 0xF8) >> 3;
        packed[4] |= (packed_time[2] & 0x01) << 5;
        // Pack scalar and enumerated fields
    }

    date_time_t unpack_date_time (
        uint8_t * packed
    ) {
        date_time_t obj;
        // Unpack any referenced structures
        // - date (21 bits)
        uint8_t packed_date[3];
        memset((void *)packed_date, 0, 3);
        packed_date[0] |= (packed[0] >> 0) & 0xFF;
        packed_date[1] |= (packed[1] >> 0) & 0xFF;
        packed_date[2] |= (packed[2] >> 0) & 0x1F;
        obj.date = unpack_date(packed_date);
        // - time (17 bits)
        uint8_t packed_time[3];
        memset((void *)packed_time, 0, 3);
        packed_time[0] |= (packed[2] >> 5) & 0x07;
        packed_time[0] |= (packed[3] << 3) & 0xF8;
        packed_time[1] |= (packed[3] >> 5) & 0x07;
        packed_time[1] |= (packed[4] << 3) & 0xF8;
        packed_time[2] |= (packed[4] >> 5) & 0x01;
        obj.time = unpack_time(packed_time);
        // Unpack any scalar or enumerated fields
        return obj;
    }

}

#endif // __CALENDAR_HPP__
