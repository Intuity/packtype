# Generated by packtype (https://github.com/Intuity/packtype)
# Date created: 2021-09-01T22:36:35.610239
# Source file : /Users/peterbirch/Development/Experiments/packtype/examples/structs/spec.py
#

from enum import IntEnum

# ==============================================================================
# Constants
# ==============================================================================


# ==============================================================================
# Enumerations
# ==============================================================================

# ==============================================================================
# Data Structures
# ==============================================================================

# Struct: Date (21 bits)
#
class Date:

    def __init__(
        self,
        _pt_value=None,
        _pt_union=None,
        _pt_parent=None,
        day=0,
        month=0,
        year=0,
    ):
        # Declare fields
        self.__day = day
        self.__month = month
        self.__year = year
        # Keep track of parent and union variables
        self.__pt_union  = _pt_union
        self.__pt_parent = _pt_parent
        # If a value was provided, decode it
        if _pt_value != None: self.unpack(_pt_value, force=True)

    def _pt_updated(self, child):
        if self.__pt_parent: return self.__pt_parent._pt_updated(self)

    @property
    def day(self): return self.__day

    @day.setter
    def day(self, value):
        # Update the value
        self.__day = value
        # Notify parent of update
        if self.__pt_parent: self.__pt_parent._pt_updated(self)

    @property
    def month(self): return self.__month

    @month.setter
    def month(self, value):
        # Update the value
        self.__month = value
        # Notify parent of update
        if self.__pt_parent: self.__pt_parent._pt_updated(self)

    @property
    def year(self): return self.__year

    @year.setter
    def year(self, value):
        # Update the value
        self.__year = value
        # Notify parent of update
        if self.__pt_parent: self.__pt_parent._pt_updated(self)

    def pack(self):
        """ Pack Date into a 21 bit scalar

        Returns: A packed scalar value
        """
        scalar = 0
        scalar |= (self.__day & 0x1F) << 0
        scalar |= (self.__month & 0xF) << 5
        scalar |= (self.__year & 0xFFF) << 9
        return scalar

    def unpack(self, scalar, force=False):
        """ Unpack Date from a 21 bit scalar

        Args:
            scalar: The packed scalar value to unpack
            force : Ignore the union check
        """
        # If there is an overarching union, use that to unpack instead
        if self.__pt_union and not force: return self.__pt_union.unpack(scalar)
        # Otherwise, unpack the scalar
        self.__day = (scalar >> 0) & 0x1F
        self.__month = (scalar >> 5) & 0xF
        self.__year = (scalar >> 9) & 0xFFF

# Struct: Time (17 bits)
#
class Time:

    def __init__(
        self,
        _pt_value=None,
        _pt_union=None,
        _pt_parent=None,
        hour=0,
        minute=0,
        second=0,
    ):
        # Declare fields
        self.__hour = hour
        self.__minute = minute
        self.__second = second
        # Keep track of parent and union variables
        self.__pt_union  = _pt_union
        self.__pt_parent = _pt_parent
        # If a value was provided, decode it
        if _pt_value != None: self.unpack(_pt_value, force=True)

    def _pt_updated(self, child):
        if self.__pt_parent: return self.__pt_parent._pt_updated(self)

    @property
    def hour(self): return self.__hour

    @hour.setter
    def hour(self, value):
        # Update the value
        self.__hour = value
        # Notify parent of update
        if self.__pt_parent: self.__pt_parent._pt_updated(self)

    @property
    def minute(self): return self.__minute

    @minute.setter
    def minute(self, value):
        # Update the value
        self.__minute = value
        # Notify parent of update
        if self.__pt_parent: self.__pt_parent._pt_updated(self)

    @property
    def second(self): return self.__second

    @second.setter
    def second(self, value):
        # Update the value
        self.__second = value
        # Notify parent of update
        if self.__pt_parent: self.__pt_parent._pt_updated(self)

    def pack(self):
        """ Pack Time into a 17 bit scalar

        Returns: A packed scalar value
        """
        scalar = 0
        scalar |= (self.__hour & 0x1F) << 0
        scalar |= (self.__minute & 0x3F) << 5
        scalar |= (self.__second & 0x3F) << 11
        return scalar

    def unpack(self, scalar, force=False):
        """ Unpack Time from a 17 bit scalar

        Args:
            scalar: The packed scalar value to unpack
            force : Ignore the union check
        """
        # If there is an overarching union, use that to unpack instead
        if self.__pt_union and not force: return self.__pt_union.unpack(scalar)
        # Otherwise, unpack the scalar
        self.__hour = (scalar >> 0) & 0x1F
        self.__minute = (scalar >> 5) & 0x3F
        self.__second = (scalar >> 11) & 0x3F

# Struct: DateTime (38 bits)
#
class DateTime:

    def __init__(
        self,
        _pt_value=None,
        _pt_union=None,
        _pt_parent=None,
        date=0,
        time=0,
    ):
        # Declare fields
        self.__date = Date(_pt_value=date, _pt_parent=self)
        self.__time = Time(_pt_value=time, _pt_parent=self)
        # Keep track of parent and union variables
        self.__pt_union  = _pt_union
        self.__pt_parent = _pt_parent
        # If a value was provided, decode it
        if _pt_value != None: self.unpack(_pt_value, force=True)

    def _pt_updated(self, child):
        if self.__pt_parent: return self.__pt_parent._pt_updated(self)

    @property
    def date(self): return self.__date

    @date.setter
    def date(self, value):
        # Update the value
        self.__date.unpack(value)
        # Notify parent of update
        if self.__pt_parent: self.__pt_parent._pt_updated(self)

    @property
    def time(self): return self.__time

    @time.setter
    def time(self, value):
        # Update the value
        self.__time.unpack(value)
        # Notify parent of update
        if self.__pt_parent: self.__pt_parent._pt_updated(self)

    def pack(self):
        """ Pack DateTime into a 38 bit scalar

        Returns: A packed scalar value
        """
        scalar = 0
        scalar |= (self.__date.pack() & 0x1FFFFF) << 0
        scalar |= (self.__time.pack() & 0x1FFFF) << 21
        return scalar

    def unpack(self, scalar, force=False):
        """ Unpack DateTime from a 38 bit scalar

        Args:
            scalar: The packed scalar value to unpack
            force : Ignore the union check
        """
        # If there is an overarching union, use that to unpack instead
        if self.__pt_union and not force: return self.__pt_union.unpack(scalar)
        # Otherwise, unpack the scalar
        self.__date.unpack((scalar >> 0) & 0x1FFFFF)
        self.__time.unpack((scalar >> 21) & 0x1FFFF)

# ==============================================================================
# Unions
# ==============================================================================

